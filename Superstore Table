*Data used for this project:

CREATE TABLE superstore (
    item_id INTEGER PRIMARY KEY,
    item_name TEXT,
    category TEXT,
    price DECIMAL(10, 2),
    stock_quantity INTEGER,
    average_rating DECIMAL(3, 2)
);

INSERT INTO superstore (item_id, item_name, category, price, stock_quantity, average_rating)
VALUES
    (1, 'Stainless Steel Cookware Set', 'Kitchen Supplies', 89.99, 50, 4.6),
    (2, 'Memory Foam Mattress', 'Furnishings', 499.99, 30, 4.8),
    (3, 'Smart LED TV', 'Electronics', 549.00, 20, 4.5),
    (4, 'Robot Vacuum Cleaner', 'Appliances', 199.50, 40, 4.3),
    (5, 'Wireless Bluetooth Speaker', 'Electronics', 39.99, 60, 4.2),
    (6, 'Non-Stick Baking Set', 'Kitchen Supplies', 29.95, 80, 4.4),
    (7, 'Cotton Bedding Set', 'Furnishings', 89.00, 25, 4.7),
    (8, 'Smart Home Security Camera', 'Electronics', 79.95, 15, 4.1),
    (9, 'Air Purifier', 'Appliances', 129.50, 35, 4.6),
    (10, 'Premium Coffee Maker', 'Kitchen Supplies', 79.99, 50, 4.9),
    (11, 'Ergonomic Office Chair', 'Furnishings', 189.00, 20, 4.5),
    (12, 'Wireless Earbuds', 'Electronics', 49.99, 75, 4.3),
    (13, 'Slow Cooker', 'Appliances', 49.95, 30, 4.7),
    (14, 'Cutlery Set', 'Kitchen Supplies', 34.50, 40, 4.4),
    (15, 'Cozy Throw Blanket', 'Furnishings', 24.99, 100, 4.2);

#In this project, I used SQL to get information about items sold and prices.

#Use a SELECT statement to order the items by price.
SELECT item_name, price
FROM superstore
ORDER BY price;

#Show a statistic about item categories.
SELECT COUNT(category)
FROM superstore;

#Show a statistic about price for items in "Kitchen Supplies" category.
SELECT MAX(price), item_name
FROM superstore
WHERE category="Kitchen Supplies"
GROUP BY item_name;

#Show a statistic about price from highest to lowest of items in the "Furnishings" category.
SELECT SUM(price), item_name
FROM superstore
WHERE category="Furnishings"
GROUP BY item_name DESC;

#Show a statistic about prices on the items.
SELECT AVG(price), item_name
FROM superstore
GROUP BY item_name;

#Show number of "Robot Vacuum Cleaners" are in stock.
SELECT item_name, stock_quantity
FROM superstore
WHERE item_name="Robot Vacuum Cleaner";

#Show the average rating for the "Cotton Bedding Set."
SELECT average_rating, item_name
FROM superstore
WHERE item_name="Cotton Bedding Set";

#Show the prices of the items from highest to lowest.
SELECT *
FROM superstore
ORDER BY price DESC

#Show prices of appliances from highest to lowest.
SELECT item_name, price
FROM superstore
WHERE category="Appliances"
ORDER BY price DESC;

#Show a statistic about prices in the "Electronics" category.
SELECT MIN(price)
FROM superstore
WHERE category="Electronics";



First, I utilized SQL to calculate different product metrics like category, stock quantity and average product rating. The metrics are useful in identifying the price range of various products, the maximum and minimum price in specified categories and product customer ratings.

Second, I used SQL to create a clustering algorithm placing specific products in groups based on their average rating. I included other factors such as price statistics on products and the quantity of products in stock. By applying this technique, products were placed into specific segments, like product stock quantity in the appliances category, average product rating in the furnishings category and maximum prices of products in the kitchen supplies category.

Next, I created SQL queries to introduce visualizations, like bar charts and pie charts, to show the distribution of the product segments.

Lastly, I presented the analysis in a report with Tableau summarizing the distinct characteristics of each product segment. By leveraging SQL to perform product segmentation, pertinent insights about product performance were revealed, helping to make necessary product enhancements.
